[{"/Users/pc/Desktop/code-on-boat/Project-Manager-App-Frontend/frontend/src/index.tsx":"1","/Users/pc/Desktop/code-on-boat/Project-Manager-App-Frontend/frontend/src/App.tsx":"2","/Users/pc/Desktop/code-on-boat/Project-Manager-App-Frontend/frontend/src/dashboard/Dashboard.tsx":"3"},{"size":436,"mtime":1682011273730,"results":"4","hashOfConfig":"5"},{"size":1897,"mtime":1682011273730,"results":"6","hashOfConfig":"5"},{"size":738,"mtime":1682011273730,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"nagm9j",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/Users/pc/Desktop/code-on-boat/Project-Manager-App-Frontend/frontend/src/index.tsx",["20"],[],"import ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { GoogleOAuthProvider } from \"@react-oauth/google\";\nimport React, { Suspense } from \"react\";\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\nroot.render(\n  <GoogleOAuthProvider clientId=\"762061531167-o1tqca7rja91utkm1lm0et54jsu7ah0g.apps.googleusercontent.com\">\n    <App />\n  </GoogleOAuthProvider>\n);\n","/Users/pc/Desktop/code-on-boat/Project-Manager-App-Frontend/frontend/src/App.tsx",["21","22"],[],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  googleLogout,\n  useGoogleLogin,\n  TokenResponse,\n} from \"@react-oauth/google\";\nimport \"./App.css\";\nimport Dashboard from \"./dashboard/Dashboard\";\nimport { log } from \"console\";\nimport { Url } from \"url\";\n\nexport interface Profile {\n  email: string;\n  family_name: string;\n  given_name: string;\n  id: number;\n  name: string;\n  picture: string;\n  verified_email: boolean;\n}\n\nfunction App() {\n  const [user, setUser] = useState<TokenResponse>();\n  const [profile, setProfile] = useState<Profile | undefined>();\n\n  const login = useGoogleLogin({\n    onSuccess: (codeResponse: TokenResponse) => setUser(codeResponse),\n    onError: (error) => console.log(\"Login Failed:\", error),\n  });\n  useEffect(() => {\n    if (user) {\n      axios\n        .get(\n          `https://www.googleapis.com/oauth2/v1/userinfo?access_token=${user.access_token}`,\n          {\n            headers: {\n              Authorization: `Bearer ${user.access_token}`,\n              Accept: \"application/json\",\n            },\n          }\n        )\n        .then((res) => {\n          setProfile(res.data);\n          console.log(res.data);\n        })\n        .catch((err) => console.log(err));\n    }\n  }, [user]);\n\n  const logOut = () => {\n    googleLogout();\n    setProfile(undefined);\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1 className=\"app-title\">Project Manager App</h1>\n      <h2 className=\"app-title\">Start less, finish more!</h2>\n\n      {profile ? (\n        <Dashboard profile={profile} logOut={logOut} />\n      ) : (\n        <div className=\"login-container\">\n          <h2 className=\"login-container-title\">\n            Start managing your activities like a pro!\n          </h2>\n          <button onClick={() => login()}>Sign in with Google ðŸš€ </button>\n        </div>\n      )}\n    </div>\n  );\n}\nexport default App;\n","/Users/pc/Desktop/code-on-boat/Project-Manager-App-Frontend/frontend/src/dashboard/Dashboard.tsx",["23"],[],"import React from \"react\";\nimport { Profile } from \"../App\";\nimport \"./Dashboard.css\";\n\ninterface DashbordProps {\n  profile: Profile;\n  logOut: React.MouseEventHandler<HTMLButtonElement>;\n}\n\nfunction Dashboard(props: DashbordProps) {\n  return (\n    <div>\n      <div className=\"user-info\">\n        <img src={props.profile.picture} alt=\"user image\" sizes=\"60x60\" />\n        <h3>User Logged in</h3>\n        <p>Name: {props.profile.name}</p>\n        <p>Email Address: {props.profile.email}</p>\n        <br />\n        <br />\n        <button onClick={props.logOut}>Log out</button>\n      </div>\n      <input type=\"text\" />\n      <button className=\"btn-submit-new-activity \">Add New Project</button>\n    </div>\n  );\n}\n\nexport default Dashboard;\n",{"ruleId":"24","severity":1,"message":"25","line":5,"column":17,"nodeType":"26","messageId":"27","endLine":5,"endColumn":25},{"ruleId":"24","severity":1,"message":"28","line":10,"column":10,"nodeType":"26","messageId":"27","endLine":10,"endColumn":13},{"ruleId":"24","severity":1,"message":"29","line":11,"column":10,"nodeType":"26","messageId":"27","endLine":11,"endColumn":13},{"ruleId":"30","severity":1,"message":"31","line":14,"column":9,"nodeType":"32","endLine":14,"endColumn":75},"@typescript-eslint/no-unused-vars","'Suspense' is defined but never used.","Identifier","unusedVar","'log' is defined but never used.","'Url' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement"]